plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.4'
	id 'io.spring.dependency-management' version '1.1.6'
	id 'jacoco'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}
jacoco {
	toolVersion = "0.8.12"
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'com.h2database:h2'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.boot:spring-boot-testcontainers'
	implementation group: 'org.jetbrains', name: 'annotations', version: '24.1.0'
	testImplementation group: 'org.mockito', name: 'mockito-core', version: '5.12.0'
	testImplementation group: 'org.mockito', name: 'mockito-junit-jupiter', version: '5.12.0'

	testImplementation group: 'org.jacoco', name: 'org.jacoco.agent', version: '0.8.12'

}


tasks.named('test') {
	useJUnitPlatform()
	finalizedBy('jacocoTestReport')
	testLogging {
		events "passed", "skipped", "failed"
		showStandardStreams = true
	}
}
bootJar {
	mainClass = 'com.example.Mutantes.MutantesApplication'
}
tasks.jacocoTestReport {
	dependsOn test // Ejecutar las pruebas antes de generar el informe
	reports {
		xml.required.set(true)
		csv.required.set(false)
		html.outputLocation.set(layout.buildDirectory.dir('jacocoHtml'))
	}
}

// Asegurarse de que los tests se ejecuten antes de bootRun
tasks.named('bootRun') {
	dependsOn test
}